<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>PAT：1002写出这个数</title>
    <url>/posts/72d8caaa.html</url>
    <content><![CDATA[<p>读入一个正整数 n，计算其各位数字之和，用汉语拼音写出和的每一位数字。</p>
<p>输入格式：<br>每个测试输入包含 1 个测试用例，即给出自然数 n 的值。这里保证 n 小于 10​100​​。</p>
<p>输出格式：<br>在一行内输出 n 的各位数字之和的每一位，拼音数字间有 1 空格，但一行中最后一个拼音数字后没有空格。</p>
<p>输入样例：</p>
<p>1234567890987654321123456789</p>
<p>输出样例：</p>
<p>yi san wu</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#include&lt;string.h&gt;</span></span><br><span class="line"><span class="comment">#include&lt;stdio.h&gt;</span></span><br><span class="line">int <span class="function"><span class="title">main</span></span>()</span><br><span class="line">&#123;</span><br><span class="line">char change[15][5] = &#123;<span class="string">&quot;ling&quot;</span>,<span class="string">&quot;yi&quot;</span>,<span class="string">&quot;er&quot;</span>,<span class="string">&quot;san&quot;</span>,<span class="string">&quot;si&quot;</span>,<span class="string">&quot;wu&quot;</span>,<span class="string">&quot;liu&quot;</span>,<span class="string">&quot;qi&quot;</span>,<span class="string">&quot;ba&quot;</span>,<span class="string">&quot;jiu&quot;</span>,<span class="string">&quot;shi&quot;</span>&#125;;</span><br><span class="line">char num [110];</span><br><span class="line"><span class="keyword">if</span>(scanf(<span class="string">&quot;%s&quot;</span>,num))&#123;&#125;;</span><br><span class="line">int len = strlen(num);</span><br><span class="line">int sum = 0;</span><br><span class="line"><span class="keyword">for</span>(int i = 0; i &lt; len; i++)sum += num[i] - <span class="string">&#x27;0&#x27;</span>; //若不加 - ‘0’，则是每个数字对应的ASCII码在相加 </span><br><span class="line"></span><br><span class="line">int digit[1000],i = 0;</span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">	digit[i++] = sum%10;</span><br><span class="line">	sum /= 10;</span><br><span class="line">&#125;<span class="keyword">while</span>(sum&gt;0);</span><br><span class="line"><span class="keyword">while</span>(i--)&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>,change[digit[i]]);</span><br><span class="line">	<span class="keyword">if</span>(i != 0)<span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="built_in">return</span> 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>PAT</tag>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>Python遍历字典中的键值对</title>
    <url>/posts/1b9a95c3.html</url>
    <content><![CDATA[<p>Python为字典类型提供了items()方法，items()方法会将字典里的所有的键与值一起返回。</p>
<p>例如，餐馆有一个菜单包含了菜名和价格信息。菜名和价格顾客都需要知道，可以通过遍历输出menu字典的键和值来实现。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding = utf-8</span></span><br><span class="line"><span class="comment"># 创建并初始化menu菜单字典</span></span><br><span class="line">menu=&#123;<span class="string">&#x27;fish&#x27;</span>:<span class="string">&#x27;40&#x27;</span>,<span class="string">&#x27;pork&#x27;</span>:<span class="string">&#x27;30&#x27;</span>,<span class="string">&#x27;potato&#x27;</span>:<span class="string">&#x27;20&#x27;</span>,<span class="string">&#x27;lamb&#x27;</span>:<span class="string">&#x27;50&#x27;</span>&#125;</span><br><span class="line"><span class="comment"># 利用items()方法遍历输出键和值</span></span><br><span class="line"><span class="keyword">for</span> key,value <span class="keyword">in</span> menu.items():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;\nkey:&#x27;</span>+key)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;value:&#x27;</span>+value)</span><br><span class="line"></span><br><span class="line">输出结果：</span><br><span class="line">key:fish</span><br><span class="line">value:40</span><br><span class="line">key:pork</span><br><span class="line">value:30</span><br><span class="line">key:potato</span><br><span class="line">value:20</span><br><span class="line">key:lamb</span><br><span class="line">value:50</span><br></pre></td></tr></table></figure>

<p>输出结果表示，items()方法每次都将对应的键和值指定到key和value变量中，然后用for循环输出。</p>
]]></content>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python在列表尾部添加元素</title>
    <url>/posts/9f04727b.html</url>
    <content><![CDATA[<p>在列表尾部添加元素<br>在Python中，可以使用append()方法向一个列表的尾部追加一个元素，其基本语法如下：</p>
<p>source_list.append(obj)</p>
<p>其中，</p>
<p>source_list：为待修改的列表<br>obj：为待插入的元素</p>
<p>例如，要向guests列表尾部增加客人Hu qi，相应的语句为：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 初始化guests列表</span></span><br><span class="line">guests=[<span class="string">&#x27;Zhang san&#x27;</span>,<span class="string">&#x27;Li si&#x27;</span>,<span class="string">&#x27;Wang wu&#x27;</span>,<span class="string">&#x27;Zhao liu&#x27;</span>]</span><br><span class="line"><span class="comment"># 向guests列表尾部追加一个名为Hu qi的客人</span></span><br><span class="line">guests.append(<span class="string">&#x27;Hu qi&#x27;</span>)</span><br><span class="line"><span class="comment"># 输出新的guests列表</span></span><br><span class="line"><span class="built_in">print</span>(guests)</span><br><span class="line"></span><br><span class="line">输出结果为： [<span class="string">&#x27;Zhang san&#x27;</span>,<span class="string">&#x27;Li si&#x27;</span>,<span class="string">&#x27;Wang wu&#x27;</span>,<span class="string">&#x27;Zhao liu&#x27;</span>,<span class="string">&#x27;Hu qi&#x27;</span>]</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python在列表指定位置添加元素</title>
    <url>/posts/d5152ecc.html</url>
    <content><![CDATA[<p>在列表指定位置添加元素</p>
<p>Python也提供了insert()方法，可以在列表任意指定位置插入元素，其基本语法为：</p>
<p>source_list.insert(index,obj)其中，source_list：为待修改的列表<br>index：为待插入的位置索引<br>obj：为待插入的元素</p>
<p>注意：在Python中，列表起始元素的位置索引为0例如，要向guests列表中Zhang san的后面增加客人Hu qi，则相应的语句为：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建并初始化guests列表</span></span><br><span class="line">guests=[<span class="string">&#x27;Zhang san&#x27;</span>,<span class="string">&#x27;Li si&#x27;</span>,<span class="string">&#x27;Wang wu&#x27;</span>,<span class="string">&#x27;Zhao liu&#x27;</span>]</span><br><span class="line"><span class="comment"># 向guests列表Zhang san后面增加一个名为Hu qi的客人</span></span><br><span class="line">guests.insert(1,<span class="string">&#x27;Hu qi&#x27;</span>)</span><br><span class="line"><span class="comment"># 输出新的guests列表</span></span><br><span class="line"><span class="built_in">print</span>(guests)</span><br><span class="line"></span><br><span class="line">输出结果为： [<span class="string">&#x27;Zhang san&#x27;</span>,<span class="string">&#x27;Hu qi&#x27;</span>,<span class="string">&#x27;Li si&#x27;</span>,<span class="string">&#x27;Wang wu&#x27;</span>,<span class="string">&#x27;Zhao liu&#x27;</span>]</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>二维数组井字棋</title>
    <url>/posts/3f2eafc3.html</url>
    <content><![CDATA[<h1 id="tic-tac-toe游戏"><a href="#tic-tac-toe游戏" class="headerlink" title="tic-tac-toe游戏"></a>tic-tac-toe游戏</h1><p>  读入一个3×3矩阵，矩阵中的数字为1表示该位置上有一个X，为0表示该位置上有一个O，要求编写程序判断这个矩阵中是否有获胜的一方，输出表示获胜一方的字符X或O，或输出无人获胜。
  </p>
<p> 本游戏获胜是指在同一行、同一列或同一对角线上，有三个相同字符。</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"> <span class="comment">#include &lt;stdio.h&gt;</span></span><br><span class="line"></span><br><span class="line">int <span class="function"><span class="title">main</span></span>()</span><br><span class="line">&#123;</span><br><span class="line">	//定义变量 </span><br><span class="line">	const int size = 3;</span><br><span class="line">	int board[size][size];</span><br><span class="line">	int i, j;</span><br><span class="line">	int numofXr, numofOr;  //numofXr表示同一行row中X的个数， numofOr表示同一行中O的个数</span><br><span class="line">	int numofXc, numofOc;  //numofXc表示同一列column中X的个数， numofOc示同一列中O的个数</span><br><span class="line">	int numofXd1, numofOd1, numofXd2, numofOd2;  //numofXd表示对角线diagonal上X的个数， numofOd表示对角线上O的个数，d1表示主对角线，d2表示次对角线 </span><br><span class="line">	int result = -1;  // -1表示没人赢，1表示X赢，0表示O赢</span><br><span class="line">	</span><br><span class="line">		</span><br><span class="line">	//读入矩阵</span><br><span class="line">	<span class="keyword">for</span> (i=0; i&lt;size; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (j=0; j&lt;size; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			scanf(<span class="string">&quot;%d&quot;</span>, &amp;board[i][j]);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125; </span><br><span class="line">	</span><br><span class="line">	//判断行和列 </span><br><span class="line">	<span class="keyword">for</span> (i=0; i&lt;size &amp;&amp; result==-1; i++) </span><br><span class="line">	&#123;</span><br><span class="line">		numofXr =  numofOr = numofXc = numofOc = 0;</span><br><span class="line">		<span class="keyword">for</span> (j=0; j&lt;size; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			//判断行</span><br><span class="line">			<span class="keyword">if</span> (board[i][j] == 1)</span><br><span class="line">			&#123;</span><br><span class="line">				numofXr++;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">			&#123;</span><br><span class="line">				numofOr++;</span><br><span class="line">			&#125;</span><br><span class="line">			//判断列</span><br><span class="line">			<span class="keyword">if</span> (board[j][i] == 1)</span><br><span class="line">			&#123;</span><br><span class="line">				numofXc++;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">			&#123;</span><br><span class="line">				numofOc++;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (numofXr == size || numofXc == size)</span><br><span class="line">		&#123;</span><br><span class="line">			result = 1;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (numofOr == size || numofOc == size)</span><br><span class="line">		&#123;</span><br><span class="line">			result = 0;</span><br><span class="line">		&#125;</span><br><span class="line">	</span><br><span class="line">	&#125; </span><br><span class="line">	</span><br><span class="line">	//判断对角线 </span><br><span class="line">	numofXd1 = numofOd1 = numofXd2 = numofOd2 = 0;  //此处初始化值需要在循环外面，而在判断行与列时初始化在循环里面，注意区分。 </span><br><span class="line">	<span class="keyword">for</span> (i=0; i&lt;size &amp;&amp; result==-1; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (board[i][i] == 1)</span><br><span class="line">		&#123;</span><br><span class="line">			numofXd1++;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			numofOd1++;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (board[i][size-i-1] == 1)</span><br><span class="line">		&#123;</span><br><span class="line">			numofXd2++;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			numofOd2++;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (numofXd1 == size || numofXd2 == size)</span><br><span class="line">	&#123;</span><br><span class="line">		result = 1;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (numofOd1 == size || numofOd2 == size)</span><br><span class="line">	&#123;</span><br><span class="line">		result = 0;</span><br><span class="line">	&#125;	</span><br><span class="line">	</span><br><span class="line">	//输出结果 </span><br><span class="line">	switch (result)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">case</span> -1:</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;没有人赢\n&quot;</span>);</span><br><span class="line">			<span class="built_in">break</span>;</span><br><span class="line">		<span class="keyword">case</span> 0:</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;O\n&quot;</span>);</span><br><span class="line">			<span class="built_in">break</span>;</span><br><span class="line">		<span class="keyword">case</span> 1:</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;X\n&quot;</span>);</span><br><span class="line">			<span class="built_in">break</span>;</span><br><span class="line">		default:</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;Error!\n&quot;</span>);</span><br><span class="line">			<span class="built_in">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">return</span> 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>C</tag>
        <tag>game</tag>
      </tags>
  </entry>
  <entry>
    <title>使用arduino输出QMC5883L的三轴磁场和YAW角</title>
    <url>/posts/a012d6f7.html</url>
    <content><![CDATA[<p>通过IIC输出三轴磁力原始数据<br>通过MechaQMC5883库输出yaw角<br>我找了不少关于QMC磁力计的文章，发现不管是商家给的程序还是博客的其他文章，都是基于stm32的，而QMC在arduino上的应用却没多少，于是就一边看着数据文档，一边在arduino上实现QMC。</p>
<p>这里用的是arduino nano,</p>
<p>引脚连接：</p>
<p>nano -&gt; QMC</p>
<p>5V -&gt; VCC</p>
<p>A5 -&gt; SCL</p>
<p>A4 -&gt; SDA</p>
<p>GND -&gt; GND</p>
<p>首先在例程中找到I2C_scanner,打开，连接QMC，上传。</p>
<p><img src="/images/pasted-7.png"></p>
<p>如果没有这个例程，这里给出：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">// --------------------------------------</span><br><span class="line">// i2c_scanner</span><br><span class="line">//</span><br><span class="line">// Version 1</span><br><span class="line">//    This program (or code that looks like it)</span><br><span class="line">//    can be found <span class="keyword">in</span> many places.</span><br><span class="line">//    For example on the Arduino.cc forum.</span><br><span class="line">//    The original author is not know.</span><br><span class="line">// Version 2, Juni 2012, Using Arduino 1.0.1</span><br><span class="line">//     Adapted to be as simple as possible by Arduino.cc user Krodal</span><br><span class="line">// Version 3, Feb 26  2013</span><br><span class="line">//    V3 by louarnold</span><br><span class="line">// Version 4, March 3, 2013, Using Arduino 1.0.3</span><br><span class="line">//    by Arduino.cc user Krodal.</span><br><span class="line">//    Changes by louarnold removed.</span><br><span class="line">//    Scanning addresses changed from 0...127 to 1...119,</span><br><span class="line">//    according to the i2c scanner by Nick Gammon</span><br><span class="line">//    https://www.gammon.com.au/forum/?id=10896</span><br><span class="line">// Version 5, March 28, 2013</span><br><span class="line">//    As version 4, but address scans now to 127.</span><br><span class="line">//    A sensor seems to use address 120.</span><br><span class="line">// Version 6, November 27, 2015.</span><br><span class="line">//    Added waiting <span class="keyword">for</span> the Leonardo serial communication.</span><br><span class="line">//</span><br><span class="line">//</span><br><span class="line">// This sketch tests the standard 7-bit addresses</span><br><span class="line">// Devices with higher bit address might not be seen properly.</span><br><span class="line">//</span><br><span class="line"></span><br><span class="line"><span class="comment">#include &lt;Wire.h&gt;</span></span><br><span class="line"></span><br><span class="line">void <span class="function"><span class="title">setup</span></span>() &#123;</span><br><span class="line">  Wire.begin();</span><br><span class="line"></span><br><span class="line">  Serial.begin(9600);</span><br><span class="line">  <span class="keyword">while</span> (!Serial); // Leonardo: <span class="built_in">wait</span> <span class="keyword">for</span> serial monitor</span><br><span class="line">  Serial.println(<span class="string">&quot;\nI2C Scanner&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void <span class="function"><span class="title">loop</span></span>() &#123;</span><br><span class="line">  int nDevices = 0;</span><br><span class="line"></span><br><span class="line">  Serial.println(<span class="string">&quot;Scanning...&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (byte address = 1; address &lt; 127; ++address) &#123;</span><br><span class="line">    // The i2c_scanner uses the <span class="built_in">return</span> value of</span><br><span class="line">    // the Write.endTransmisstion to see <span class="keyword">if</span></span><br><span class="line">    // a device did acknowledge to the address.</span><br><span class="line">    Wire.beginTransmission(address);</span><br><span class="line">    byte error = Wire.endTransmission();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (error == 0) &#123;</span><br><span class="line">      Serial.print(<span class="string">&quot;I2C device found at address 0x&quot;</span>);</span><br><span class="line">      <span class="keyword">if</span> (address &lt; 16) &#123;</span><br><span class="line">        Serial.print(<span class="string">&quot;0&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      Serial.print(address, HEX);</span><br><span class="line">      Serial.println(<span class="string">&quot;  !&quot;</span>);</span><br><span class="line"></span><br><span class="line">      ++nDevices;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (error == 4) &#123;</span><br><span class="line">      Serial.print(<span class="string">&quot;Unknown error at address 0x&quot;</span>);</span><br><span class="line">      <span class="keyword">if</span> (address &lt; 16) &#123;</span><br><span class="line">        Serial.print(<span class="string">&quot;0&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      Serial.println(address, HEX);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (nDevices == 0) &#123;</span><br><span class="line">    Serial.println(<span class="string">&quot;No I2C devices found\n&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    Serial.println(<span class="string">&quot;done\n&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  delay(5000); // Wait 5 seconds <span class="keyword">for</span> next scan</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>上传后，打开串口监视器，可以看见QMC的地址</p>
<p><img src="/images/pasted-8.png"></p>
<p>然后编写程序：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#include &lt;Wire.h&gt;           //使用IIC库</span></span><br><span class="line"><span class="comment">#define address 0x0D        //QMC5883L的设备地址设置</span></span><br><span class="line"></span><br><span class="line">void <span class="function"><span class="title">setup</span></span>()&#123;</span><br><span class="line">  Serial.begin(9600);  //初始化串口和I2C口</span><br><span class="line">  Wire.begin();</span><br><span class="line">//初始化模块</span><br><span class="line">  Wire.beginTransmission(address);</span><br><span class="line">  Wire.write(0x09); //选择控制寄存器0X09</span><br><span class="line">  Wire.write(0x1D); //设置0x09寄存器为：OSR:512Hz，RNG：+/-8Gauss，ODG：200Hz，MODE：连续工作模式</span><br><span class="line">  Wire.endTransmission();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void <span class="function"><span class="title">loop</span></span>()&#123;</span><br><span class="line"></span><br><span class="line">  int x,y,z; //triple axis data</span><br><span class="line"></span><br><span class="line">  Wire.beginTransmission(address);//读写开始</span><br><span class="line">  Wire.write(0x00); //选择X,Y，Z所在数据储存寄存器</span><br><span class="line">  Wire.endTransmission();</span><br><span class="line"></span><br><span class="line">//读取X、Y、Z三个方向的坐标值</span><br><span class="line">  Wire.requestFrom(address, 6);</span><br><span class="line">  <span class="keyword">if</span>(6&lt;=Wire.available())&#123;</span><br><span class="line">    x = Wire.read()&lt;&lt;<span class="string">8; //X msb</span></span><br><span class="line"><span class="string">    x |= Wire.read(); //X lsb</span></span><br><span class="line"><span class="string">    z = Wire.read()&lt;&lt;8</span>; //Z msb</span><br><span class="line">    z |= Wire.read(); //Z lsb</span><br><span class="line">    y = Wire.read()&lt;&lt;<span class="string">8; //Y msb</span></span><br><span class="line"><span class="string">    y |= Wire.read(); //Y lsb</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">//打印坐标到串口</span></span><br><span class="line"><span class="string">  Serial.print(&quot;x: &quot;);</span></span><br><span class="line"><span class="string">  Serial.print(x);</span></span><br><span class="line"><span class="string">  Serial.print(&quot;  y: &quot;);</span></span><br><span class="line"><span class="string">  Serial.print(y);</span></span><br><span class="line"><span class="string">  Serial.print(&quot;  z: &quot;);</span></span><br><span class="line"><span class="string">  Serial.println(z);</span></span><br><span class="line"><span class="string">  delay(100);</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure>

<p>这里会输出三轴磁力数据：</p>
<p><img src="/images/pasted-9.png"></p>
<p>但这些还没有转为角度，使用下面这个链接中的库转为yaw角：</p>
<p><a href="https://github.com/keepworking/Mecha_QMC5883L">https://github.com/keepworking/Mecha_QMC5883L</a></p>
<p>下载这个库，并保存至你的arduino库位置中：</p>
<p>…\Arduino\libraries</p>
<p>将文件名修改为MechaQMC5883</p>
<p>编写以下代码：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#include &lt;Wire.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;MechaQMC5883.h&gt;</span></span><br><span class="line"></span><br><span class="line">MechaQMC5883 qmc;</span><br><span class="line"></span><br><span class="line">void <span class="function"><span class="title">setup</span></span>() &#123;</span><br><span class="line">  Wire.begin();</span><br><span class="line">  Serial.begin(9600);</span><br><span class="line">  qmc.init();</span><br><span class="line">  //qmc.setMode(Mode_Continuous,ODR_200Hz,RNG_2G,OSR_256);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void <span class="function"><span class="title">loop</span></span>() &#123;</span><br><span class="line">  int x,y,z;</span><br><span class="line">  int yaw;</span><br><span class="line">  qmc.read(&amp;x,&amp;y,&amp;z);</span><br><span class="line">  yaw = qmc.azimuth(&amp;y,&amp;x);</span><br><span class="line"></span><br><span class="line">  Serial.print(<span class="string">&quot;x: &quot;</span>);</span><br><span class="line">  Serial.print(x);</span><br><span class="line">  Serial.print(<span class="string">&quot; y: &quot;</span>);</span><br><span class="line">  Serial.print(y);</span><br><span class="line">  Serial.print(<span class="string">&quot; z: &quot;</span>);</span><br><span class="line">  Serial.print(z);</span><br><span class="line">  Serial.print(<span class="string">&quot; yaw: &quot;</span>);</span><br><span class="line">  Serial.print(yaw);</span><br><span class="line">  Serial.println();</span><br><span class="line">  delay(100);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上传，打开串口监视器：</p>
<p><img src="/images/pasted-10.png"></p>
<p>已经输出yaw角！</p>
]]></content>
      <tags>
        <tag>arduino</tag>
        <tag>c/c++</tag>
      </tags>
  </entry>
  <entry>
    <title>关于hexo 首页图片无法显示解决方法</title>
    <url>/posts/428be35.html</url>
    <content><![CDATA[<p><img src="/images/pasted-6.png" alt="upload successful"></p>
<p>有时Markdown可以显示图片，而上传hexo后无法显示图片，只要在Markdown的图片显示链接中将“\”修改为“/”，同时删除第一个和最后一个“\”</p>
<p><img src="/images/pasted-3.png" alt="upload successful"></p>
<p>修改为</p>
<p><img src="/images/pasted-4.png" alt="upload successful"></p>
<p>即可显示在hexo</p>
]]></content>
      <tags>
        <tag>hexo</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>openCV人脸识别（从电脑摄像头获取图像）</title>
    <url>/posts/33329d65.html</url>
    <content><![CDATA[<p>openCV人脸识别（从电脑摄像头获取图像）</p>
<h1 id="首先安装openCV-Python库"><a href="#首先安装openCV-Python库" class="headerlink" title="首先安装openCV-Python库"></a>首先安装openCV-Python库</h1><p>使用pycharm作为执行软件</p>
<p><img src="/images/pasted-12.png"></p>
<p><img src="/images/pasted-13.png"></p>
<h1 id="Haar级联检测器"><a href="#Haar级联检测器" class="headerlink" title="Haar级联检测器"></a>Haar级联检测器</h1><p>找到OpenCV根目录下的data/haarcascades文件夹下包含了所有OpenCV的人脸检测的XML文件，这些文件可以用于检测静止图像、视频以及摄像头所得到的图像中的人脸。</p>
<p><img src="/images/pasted-14.png"></p>
<h1 id="我们先选择识别一张静态图像"><a href="#我们先选择识别一张静态图像" class="headerlink" title="我们先选择识别一张静态图像"></a>我们先选择识别一张静态图像</h1><p>识别的图像要保存至Haar级联检测器相同路径！</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">import cv2</span><br><span class="line"></span><br><span class="line"><span class="comment">#定义图片</span></span><br><span class="line">filename = <span class="string">&#x27;D:/pycharm/my pycharm/venv/Lib/site-packages/cv2/data/c1.jpg&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#加载人脸检测相关的pre-trained分类器，级联检测器</span></span><br><span class="line">face_cascade = cv2.CascadeClassifier(<span class="string">&#x27;D:/pycharm/my pycharm/venv/Lib/site-packages/cv2/data/haarcascade_frontalface_default.xml&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#读取图像</span></span><br><span class="line">img = cv2.imread(filename)</span><br><span class="line"></span><br><span class="line"><span class="comment">#转为灰度图片</span></span><br><span class="line">gray = cv2.cvtColor(img,cv2.COLOR_RGB2GRAY)</span><br><span class="line"></span><br><span class="line"><span class="comment">#人脸检测，第二个参数是移动距离，第三个参数是识别度，越大识别度越高</span></span><br><span class="line">faces = face_cascade.detectMultiScale(gray,1.05,10)</span><br><span class="line"></span><br><span class="line"><span class="comment">#画方框</span></span><br><span class="line"><span class="keyword">for</span> (x,y,w,h) <span class="keyword">in</span> faces:</span><br><span class="line">    cv2.rectangle(img,(x,y),(x+w,y+w),(0,255,0),2)</span><br><span class="line"></span><br><span class="line">cv2.namedWindow(<span class="string">&#x27;face&#x27;</span>,cv2.WINDOW_KEEPRATIO)<span class="comment">#图像框可以拉动</span></span><br><span class="line">cv2.imshow(<span class="string">&#x27;face&#x27;</span>,img)</span><br><span class="line">cv2.imwrite(<span class="string">&#x27;face.jpg&#x27;</span>,img)</span><br><span class="line">cv2.waitKey(0)</span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure>

<p><img src="/images/pasted-15.png"></p>
<p>如果发现人脸没有被识别出来，可以根据情况调节detectMultiScale函数的第二个参数scaleFactor，它表示人脸检测过程中每次迭代时图像的压缩率。</p>
<h1 id="再试试通过摄像头获取图像"><a href="#再试试通过摄像头获取图像" class="headerlink" title="再试试通过摄像头获取图像"></a>再试试通过摄像头获取图像</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">import cv2</span><br><span class="line"></span><br><span class="line"><span class="comment">#开启电脑0号摄像头，捕捉图像</span></span><br><span class="line"><span class="built_in">cap</span> = cv2.VideoCapture(0)</span><br><span class="line"><span class="comment">#从摄像头获取图像，第一个为布尔变量表示成功与否，第二个变量是图像</span></span><br><span class="line">ret,filename = cap.read()</span><br><span class="line"><span class="comment">#保存图像至Haar相同路径</span></span><br><span class="line">cv2.imwrite(<span class="string">&#x27;D:/pycharm/my pycharm/venv/Lib/site-packages/cv2/data/c1.jpg&#x27;</span>,filename)</span><br><span class="line"></span><br><span class="line"><span class="comment">#释放摄像头资源</span></span><br><span class="line">cap.release()</span><br><span class="line"></span><br><span class="line"><span class="comment">#定义图片</span></span><br><span class="line">filename = <span class="string">&#x27;D:/pycharm/my pycharm/venv/Lib/site-packages/cv2/data/c1.jpg&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#加载人脸检测相关的pre-trained分类器，级联检测器</span></span><br><span class="line">face_cascade = cv2.CascadeClassifier(<span class="string">&#x27;D:/pycharm/my pycharm/venv/Lib/site-packages/cv2/data/haarcascade_frontalface_default.xml&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#读取图像</span></span><br><span class="line">img = cv2.imread(filename)</span><br><span class="line"></span><br><span class="line"><span class="comment">#转为灰度图片</span></span><br><span class="line">gray = cv2.cvtColor(img,cv2.COLOR_RGB2GRAY)</span><br><span class="line"></span><br><span class="line"><span class="comment">#人脸检测，第二个参数是移动距离，第三个参数是识别度，越大识别度越高</span></span><br><span class="line">faces = face_cascade.detectMultiScale(gray,1.05,10)</span><br><span class="line"></span><br><span class="line"><span class="comment">#画方框</span></span><br><span class="line"><span class="keyword">for</span> (x,y,w,h) <span class="keyword">in</span> faces:</span><br><span class="line">    cv2.rectangle(img,(x,y),(x+w,y+w),(0,255,0),2)</span><br><span class="line"></span><br><span class="line">cv2.namedWindow(<span class="string">&#x27;face&#x27;</span>,cv2.WINDOW_KEEPRATIO)<span class="comment">#图像框可以拉动</span></span><br><span class="line">cv2.imshow(<span class="string">&#x27;face&#x27;</span>,img)</span><br><span class="line">cv2.imwrite(<span class="string">&#x27;face.jpg&#x27;</span>,img)</span><br><span class="line">cv2.waitKey(0)</span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure>

<p>其会通过摄像头拍摄一张照片，存放到本地，并调用其进行识别，结果将会显示出来。</p>
]]></content>
      <tags>
        <tag>python</tag>
        <tag>openCV</tag>
        <tag>pycharm</tag>
      </tags>
  </entry>
  <entry>
    <title>微信小程序苹果机型iOS连接蓝牙失败解决方法（wx.getBLEDeviceCharacteristics）</title>
    <url>/posts/8ece9ac1.html</url>
    <content><![CDATA[<p>iOS在进行wx.getBLEDeviceCharacteristics获得特征值时，serviceId对应的uuid必须为大写才可以，否则抛出错误。</p>
<p>我使用的uuid是（小写）：显示fail</p>
<p><img src="/images/pasted-16.png" alt="fail"></p>
<p>修改后的uuid（大写）：正常连接</p>
<p><img src="/images/pasted-17.png" alt="successful"></p>
]]></content>
      <tags>
        <tag>JavaScript</tag>
        <tag>Java</tag>
        <tag>IOS</tag>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>微信小程序不同组件view，text并排显示横行方法</title>
    <url>/posts/38c6db37.html</url>
    <content><![CDATA[<p>不同组件并排显示，需要放置在一个view</p>
<p>例如：在wxml中将text和scroll-view并排显示，则需要把它们放置在一个view中</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;view <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;parilin&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">	<span class="xml"><span class="tag">&lt;<span class="name">text</span> <span class="attr">class</span>=<span class="string">&quot;verti_clockin&quot;</span>&gt;</span>系统输出与发送框<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"> <span class="xml"><span class="tag">&lt;<span class="name">scroll-view</span> <span class="attr">scroll-y</span> <span class="attr">class</span>=<span class="string">&quot;send_back&quot;</span> <span class="attr">style</span>=<span class="string">&quot;height:30vh;&quot;</span> <span class="attr">scroll-into-view</span>=<span class="string">&quot;&#123;&#123;lastindex_top&#125;&#125;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml"> 	<span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;flex_column&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml"> 		<span class="tag">&lt;<span class="name">text</span> <span class="attr">id</span>=<span class="string">&quot;item&#123;&#123;index&#125;&#125;&quot;</span>  <span class="attr">wx:for</span>=<span class="string">&quot;&#123;&#123;logs_top&#125;&#125;&quot;</span> <span class="attr">wx:key</span>=<span class="string">&quot;index&quot;</span> <span class="attr">style</span>=<span class="string">&quot;font-size:80%;color:#000;&quot;</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span></span><br><span class="line"><span class="xml"> 	<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line"><span class="xml"> <span class="tag">&lt;/<span class="name">scroll-view</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;/view&gt;</span><br></pre></td></tr></table></figure>

<p>该view的class=”parilin”样式需要在wxss中设置，例如：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.parilin</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">10px</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>send_back样式也给出</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.send_back</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">84vw</span>;</span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="number">2vw</span>;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">3vw</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#FFF</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">3vw</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中display：flex即可让view中的不同组件并排显示</p>
<p><img src="https://img-blog.csdnimg.cn/59d3ca33484e43b89e3347942b66b7f9.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NjM2OTYxMA==,size_16,color_FFFFFF,t_70#pic_center" alt="不同组件并排显示"></p>
]]></content>
      <tags>
        <tag>JavaScript</tag>
        <tag>wxss</tag>
        <tag>wxml</tag>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>上传图片</title>
    <url>/posts/bd55ecf0.html</url>
    <content><![CDATA[<p>试用Mardown上传图片，测试上传图片的性能和速度，属性Markdown上传图片的嵌入链接规则。</p>
<p><img src="/images/pasted-0.png"></p>
]]></content>
      <tags>
        <tag>hexo</tag>
        <tag>picture</tag>
      </tags>
  </entry>
</search>
